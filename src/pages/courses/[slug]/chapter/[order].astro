---
export const prerender = false;

import Layout from '../../../../components/Layout.astro';
import { getChapterContent } from '../../../../lib/student';
import { renderMarkdown } from '../../../../lib/latex';

const { slug, order } = Astro.params;

if (!slug || !order) {
  return Astro.redirect('/courses');
}

const chapterOrder = parseInt(order);
const courseData = await getChapterContent(slug, chapterOrder);

if (!courseData || !courseData.chapter) {
  return Astro.redirect(`/courses/${slug}`);
}

const { course, chapter, prevChapter, nextChapter } = courseData;
const renderedContent = chapter.content ? renderMarkdown(chapter.content) : '';

// Get quizzes for this course
const { getCourseQuizzes } = await import('../../../../lib/quizzes');
const courseQuizzes = await getCourseQuizzes(course.id);

// Parse quiz data
const quizzes = courseQuizzes.map(quiz => {
  const settings = quiz.settings ? JSON.parse(quiz.settings) : {};
  const questions = quiz.questions ? JSON.parse(quiz.questions) : [];
  
  return {
    id: quiz.id,
    title: quiz.title,
    type: settings.type || 'multiple-choice',
    questionCount: settings.type === 'essay' ? (settings.problemCount || 0) : (Array.isArray(questions) ? questions.length : 0),
    isEssay: settings.type === 'essay'
  };
});
---

<Layout title={`${chapter.title} - ${course.title}`}>
  <div class="min-h-screen bg-gray-50">
    <!-- Chapter Header -->
    <div class="bg-white shadow mb-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <a href={`/courses/${course.slug}`} class="text-gray-700 hover:text-blue-600 mr-4" data-i18n="courses.backToCourse">‚Üê Back to Course</a>
            <h1 class="text-2xl font-bold text-gray-900">{chapter.title}</h1>
          </div>
          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-500"><span data-i18n="courses.chapter">Chapter</span> {chapter.order}</span>
          </div>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Chapter Navigation -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4" data-i18n="courses.courseContents">Course Contents</h3>
            <nav class="space-y-2">
              {course.chapters.map((ch) => (
                <a
                  href={`/courses/${course.slug}/chapter/${ch.order}`}
                  class={`block px-3 py-2 text-sm rounded-md transition-colors ${
                    ch.order === chapterOrder
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-700 hover:bg-blue-50 hover:text-blue-700'
                  }`}
                >
                  <div class="flex items-center">
                    <span class={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium mr-3 ${
                      ch.order === chapterOrder
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-200 text-gray-600'
                    }`}>
                      {ch.order}
                    </span>
                    <span class="truncate">{ch.title}</span>
                  </div>
                </a>
              ))}
            </nav>
          </div>
        </div>

        <!-- Chapter Content -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-lg shadow p-8">
            <div class="prose prose-lg max-w-none">
              <h2 class="text-3xl font-bold text-gray-900 mb-6">{chapter.title}</h2>
              
              {renderedContent ? (
                <div class="chapter-content" set:html={renderedContent} />
              ) : (
                <div class="text-center py-12">
                  <div class="text-gray-400 mb-4">
                    <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <h3 class="text-lg font-medium text-gray-900 mb-2" data-i18n="courses.contentComingSoon">Content Coming Soon</h3>
                  <p class="text-gray-500" data-i18n="courses.contentBeingPrepared">This chapter is being prepared by your instructor.</p>
                </div>
              )}
            </div>

            <!-- Course Quizzes Section -->
            {quizzes.length > 0 && (
              <div class="mt-8 pt-6 border-t">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">üìù Kuis untuk Kursus Ini</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {quizzes.map((quiz) => (
                    <a
                      href={`/quizzes/${quiz.id}`}
                      class="block p-4 border border-gray-200 rounded-lg hover:border-blue-500 hover:shadow-md transition-all"
                    >
                      <div class="flex items-start justify-between">
                        <div class="flex-1">
                          <h4 class="font-semibold text-gray-900">{quiz.title}</h4>
                          <p class="text-sm text-gray-500 mt-1">
                            {quiz.questionCount} {quiz.isEssay ? 'soal' : 'pertanyaan'}
                          </p>
                        </div>
                        {quiz.isEssay && (
                          <span class="px-2 py-1 text-xs font-semibold rounded-full bg-purple-100 text-purple-800">
                            Essay
                          </span>
                        )}
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Navigation -->
            <div class="mt-8 flex justify-between items-center pt-6 border-t">
              <div>
                {prevChapter ? (
                  <a
                    href={`/courses/${course.slug}/chapter/${prevChapter.order}`}
                    class="inline-flex items-center text-blue-600 hover:text-blue-700"
                  >
                    <svg class="mr-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                    <span data-i18n="courses.previous">Previous</span>: {prevChapter.title}
                  </a>
                ) : (
                  <span class="text-gray-400" data-i18n="courses.noPreviousChapter">No previous chapter</span>
                )}
              </div>
              
              <div>
                {nextChapter ? (
                  <a
                    href={`/courses/${course.slug}/chapter/${nextChapter.order}`}
                    class="inline-flex items-center text-blue-600 hover:text-blue-700"
                  >
                    <span data-i18n="courses.next">Next</span>: {nextChapter.title}
                    <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </a>
                ) : (
                  <span class="text-gray-400" data-i18n="courses.noNextChapter">No next chapter</span>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .chapter-content {
    line-height: 1.7;
  }
  
  .chapter-content h1,
  .chapter-content h2,
  .chapter-content h3 {
    color: #1f2937;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .chapter-content p {
    margin-bottom: 1.5rem;
    color: #374151;
  }
  
  .chapter-content ul {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
    list-style-type: disc;
  }
  
  .chapter-content ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
    list-style-type: decimal;
  }
  
  .chapter-content li {
    margin-bottom: 0.5rem;
    display: list-item;
  }
  
  .chapter-content ul ul {
    list-style-type: circle;
  }
  
  .chapter-content ol ol {
    list-style-type: lower-alpha;
  }
  
  .chapter-content ol ol ol {
    list-style-type: lower-roman;
  }
  
  .chapter-content code {
    background-color: #f3f4f6;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
  }
  
  .chapter-content pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  
  .chapter-content pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
  }

  /* Table styles for GFM tables */
  .chapter-content table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
  }
  
  .chapter-content table th,
  .chapter-content table td {
    border: 1px solid #e2e8f0;
    padding: 0.5rem 0.75rem;
    text-align: left;
  }
  
  .chapter-content table thead th {
    background-color: #f1f5f9;
    font-weight: 600;
  }
  
  .chapter-content table tbody tr:nth-child(even) {
    background-color: #f8fafc;
  }
  
  .chapter-content table tbody tr:hover {
    background-color: #f1f5f9;
  }

  /* Math rendering styles */
  .math-display {
    margin: 1.5rem 0;
    text-align: center;
  }

  .math-inline {
    display: inline-block;
    vertical-align: middle;
  }

  .latex-error {
    background-color: #fee;
    border: 1px solid #fcc;
    padding: 0.5rem;
    border-radius: 0.25rem;
    color: #c33;
  }
</style>

<script>
  // Client-side LaTeX rendering and code highlighting for performance
  (function() {
    // Load KaTeX CSS/JS once if not already loaded
    if (typeof window !== 'undefined' && !document.querySelector('link[href*="katex"]')) {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css';
      document.head.appendChild(link);
    }
    
    // Load Highlight.js CSS
    if (typeof window !== 'undefined' && !document.querySelector('link[href*="highlight.js"]')) {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/github-dark.min.css';
      document.head.appendChild(link);
    }

    // Load and render LaTeX after page loads
    function renderLatex() {
      if (typeof window === 'undefined' || !window.katex) return;
      
      const mathElements = document.querySelectorAll('.math-display, .math-inline');
      mathElements.forEach((element) => {
        const latex = element.getAttribute('data-latex') || '';
        const displayMode = element.classList.contains('math-display');
        
        try {
          window.katex.render(latex, element, {
            displayMode,
            throwOnError: false,
            trust: true,
            macros: {
              '\\degree': '^{\\circ}'
            }
          });
        } catch (err) {
          console.warn('KaTeX render error:', err);
          element.innerHTML = `<span class="latex-error">LaTeX Error: ${err.message}</span>`;
        }
      });
    }
    
    // Highlight code blocks
    function highlightCode() {
      if (typeof window === 'undefined' || !window.hljs) return;
      
      const codeBlocks = document.querySelectorAll('pre code');
      codeBlocks.forEach((block) => {
        window.hljs.highlightElement(block);
      });
    }

    // Load dependencies and render
    if (typeof window !== 'undefined') {
      let scriptsLoaded = 0;
      const totalScripts = 2; // KaTeX + Highlight.js
      
      function tryRender() {
        scriptsLoaded++;
        if (scriptsLoaded === totalScripts) {
          renderLatex();
          highlightCode();
        }
      }
      
      // Check if already loaded
      if (window.katex && window.hljs) {
        tryRender();
        tryRender();
      } else {
        // Load KaTeX
        if (window.katex) {
          tryRender();
        } else {
          const katexScript = document.createElement('script');
          katexScript.src = 'https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js';
          katexScript.onload = tryRender;
          document.head.appendChild(katexScript);
        }
        
        // Load Highlight.js
        if (window.hljs) {
          tryRender();
        } else {
          const hljsScript = document.createElement('script');
          hljsScript.src = 'https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/highlight.min.js';
          hljsScript.onload = tryRender;
          document.head.appendChild(hljsScript);
        }
      }
    }
  })();
</script>

