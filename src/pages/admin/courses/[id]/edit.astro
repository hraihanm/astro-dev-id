---
export const prerender = false;

import Layout from '../../../../components/Layout.astro';
import { prisma } from '../../../../lib/db';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/admin/courses');
}

const course = await prisma.course.findUnique({
  where: { id: parseInt(id) },
  include: {
    chapters: {
      orderBy: { order: 'asc' }
    }
  }
});

if (!course) {
  return Astro.redirect('/admin/courses');
}
---

<Layout title={`Edit ${course.title}`}>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <a href="/admin/courses" class="text-gray-700 hover:text-blue-600 mr-4">‚Üê Back to Courses</a>
            <h1 class="text-2xl font-bold text-gray-900">Edit Course</h1>
          </div>
        </div>
      </div>
    </div>

    <!-- Course Edit Form -->
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <form id="course-form" class="space-y-6">
        <input type="hidden" name="courseId" value={course.id} />
        
        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div class="md:grid md:grid-cols-3 md:gap-6">
            <div class="md:col-span-1">
              <h3 class="text-lg font-medium leading-6 text-gray-900">Course Information</h3>
              <p class="mt-1 text-sm text-gray-500">
                Basic information about your course
              </p>
            </div>
            <div class="mt-5 md:mt-0 md:col-span-2">
              <div class="grid grid-cols-1 gap-6">
                <div>
                  <label for="title" class="block text-sm font-medium text-gray-700">
                    Course Title
                  </label>
                  <input
                    type="text"
                    name="title"
                    id="title"
                    required
                    value={course.title}
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Introduction to Astronomy"
                  />
                </div>

                <div>
                  <label for="slug" class="block text-sm font-medium text-gray-700">
                    Course Slug
                  </label>
                  <input
                    type="text"
                    name="slug"
                    id="slug"
                    required
                    value={course.slug}
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="intro-astronomy"
                  />
                  <p class="mt-2 text-sm text-gray-500">
                    URL-friendly version of the title (e.g., intro-astronomy)
                  </p>
                </div>

                <div>
                  <label for="description" class="block text-sm font-medium text-gray-700">
                    Description
                  </label>
                  <textarea
                    name="description"
                    id="description"
                    rows="3"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="A comprehensive introduction to the fundamentals of astronomy..."
                  >{course.description}</textarea>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div class="md:grid md:grid-cols-3 md:gap-6">
            <div class="md:col-span-1">
              <h3 class="text-lg font-medium leading-6 text-gray-900">Course Structure</h3>
              <p class="mt-1 text-sm text-gray-500">
                Current chapters in this course
              </p>
            </div>
            <div class="mt-5 md:mt-0 md:col-span-2">
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    Chapters
                  </label>
                  {course.chapters.length > 0 ? (
                    <ul class="divide-y divide-gray-200 border border-gray-200 rounded-md">
                      {course.chapters.map((chapter) => (
                        <li class="px-4 py-3 flex items-center justify-between hover:bg-gray-50">
                          <div class="flex-1">
                            <span class="text-sm font-medium text-gray-900">
                              Chapter {chapter.order}: {chapter.title}
                            </span>
                            <p class="text-xs text-gray-500 mt-1">
                              {chapter.content ? `${chapter.content.substring(0, 80)}...` : 'No content yet'}
                            </p>
                          </div>
                          <div class="flex items-center space-x-3 ml-4">
                            <a
                              href={`/courses/${course.slug}/chapter/${chapter.order}`}
                              class="text-green-600 hover:text-green-900 text-sm"
                              target="_blank"
                            >
                              View
                            </a>
                            <a
                              href={`/admin/courses/${course.id}/chapters/${chapter.id}/edit`}
                              class="text-blue-600 hover:text-blue-900 text-sm font-medium"
                            >
                              Edit
                            </a>
                          </div>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p class="text-sm text-gray-500 italic">No chapters yet. Click "Add Chapter" to get started.</p>
                  )}
                </div>
                <div>
                  <a
                    href={`/admin/courses/${course.id}/chapters/new`}
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                  >
                    + Add Chapter
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div class="md:grid md:grid-cols-3 md:gap-6">
            <div class="md:col-span-1">
              <h3 class="text-lg font-medium leading-6 text-gray-900">Quizzes</h3>
              <p class="mt-1 text-sm text-gray-500">
                Manage course quizzes
              </p>
            </div>
            <div class="mt-5 md:mt-0 md:col-span-2">
              <div class="space-y-4">
                <p class="text-sm text-gray-500">
                  Quiz management coming soon. For now, use Prisma Studio to create quizzes.
                </p>
                <button
                  type="button"
                  onclick="alert('Open Prisma Studio with: npm run db:studio')"
                  class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  Open Prisma Studio
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="flex justify-between">
          <button
            type="button"
            id="delete-btn"
            class="bg-red-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            Delete Course
          </button>
          <div class="flex space-x-3">
            <a
              href="/admin/courses"
              class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </a>
            <button
              type="submit"
              class="bg-blue-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Save Changes
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script define:vars={{ courseId: course.id }}>
  // Form submission
  document.getElementById('course-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const courseData = {
      title: formData.get('title'),
      slug: formData.get('slug'),
      description: formData.get('description')
    };
    
    try {
      const response = await fetch(`/api/admin/courses/${courseId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(courseData)
      });
      
      if (response.ok) {
        window.location.href = '/admin/courses';
      } else {
        const error = await response.json();
        alert(`Error updating course: ${error.error || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Course update error:', error);
      alert('Error updating course. Please try again.');
    }
  });

  // Delete confirmation
  document.getElementById('delete-btn')?.addEventListener('click', async () => {
    if (!confirm('Are you sure you want to delete this course? This action cannot be undone.')) {
      return;
    }

    try {
      const response = await fetch(`/api/admin/courses/${courseId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        window.location.href = '/admin/courses';
      } else {
        const error = await response.json();
        alert(`Error deleting course: ${error.error || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Course deletion error:', error);
      alert('Error deleting course. Please try again.');
    }
  });
</script>

