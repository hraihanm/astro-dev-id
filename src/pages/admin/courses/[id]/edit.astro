---
export const prerender = false;

import Layout from '../../../../components/Layout.astro';
import { prisma } from '../../../../lib/db';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/admin/courses');
}

const course = await prisma.course.findUnique({
  where: { id: parseInt(id) },
  include: {
    chapters: {
      orderBy: { order: 'asc' }
    }
  }
});

if (!course) {
  return Astro.redirect('/admin/courses');
}
---

<Layout title={`Edit ${course.title}`}>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <a href="/admin/courses" class="text-gray-700 hover:text-blue-600 mr-4" data-i18n="admin.courses.backToCourses">‚Üê Back to Courses</a>
            <h1 class="text-2xl font-bold text-gray-900" data-i18n="admin.courses.editCourse">Edit Course</h1>
          </div>
        </div>
      </div>
    </div>

    <!-- Course Edit Form -->
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <form id="course-form" class="space-y-6">
        <input type="hidden" name="courseId" value={course.id} />
        
        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div class="md:grid md:grid-cols-3 md:gap-6">
            <div class="md:col-span-1">
              <h3 class="text-lg font-medium leading-6 text-gray-900" data-i18n="admin.courses.courseInformation">Course Information</h3>
              <p class="mt-1 text-sm text-gray-500" data-i18n="admin.courses.courseInfoDesc">
                Basic information about your course
              </p>
            </div>
            <div class="mt-5 md:mt-0 md:col-span-2">
              <div class="grid grid-cols-1 gap-6">
                <div>
                  <label for="title" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.courseTitle">
                    Course Title
                  </label>
                  <input
                    type="text"
                    name="title"
                    id="title"
                    required
                    value={course.title}
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    data-i18n-placeholder="admin.courses.courseTitlePlaceholder"
                    placeholder="Introduction to Astronomy"
                  />
                </div>

                <div>
                  <label for="slug" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.courseSlug">
                    Course Slug
                  </label>
                  <input
                    type="text"
                    name="slug"
                    id="slug"
                    required
                    value={course.slug}
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    data-i18n-placeholder="admin.courses.courseSlugPlaceholder"
                    placeholder="intro-astronomy"
                  />
                  <p class="mt-2 text-sm text-gray-500" data-i18n="admin.courses.courseSlugDesc">
                    URL-friendly version of the title (e.g., intro-astronomy)
                  </p>
                </div>

                <div>
                  <label for="description" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.description">
                    Description
                  </label>
                  <textarea
                    name="description"
                    id="description"
                    rows="3"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    data-i18n-placeholder="admin.courses.descriptionPlaceholder"
                    placeholder="A comprehensive introduction to the fundamentals of astronomy..."
                  >{course.description}</textarea>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div class="md:grid md:grid-cols-3 md:gap-6">
            <div class="md:col-span-1">
              <h3 class="text-lg font-medium leading-6 text-gray-900" data-i18n="admin.courses.courseStructure">Course Structure</h3>
              <p class="mt-1 text-sm text-gray-500" data-i18n="admin.courses.currentChaptersDesc">
                Current chapters in this course
              </p>
            </div>
            <div class="mt-5 md:mt-0 md:col-span-2">
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2" data-i18n="admin.courses.chapters">
                    Chapters
                  </label>
                  {course.chapters.length > 0 ? (
                    <ul class="divide-y divide-gray-200 border border-gray-200 rounded-md">
                      {course.chapters.map((chapter) => (
                        <li class="px-4 py-3 flex items-center justify-between hover:bg-gray-50">
                          <div class="flex-1">
                            <span class="text-sm font-medium text-gray-900">
                              Bab {chapter.order}: {chapter.title}
                            </span>
                            <p class="text-xs text-gray-500 mt-1">
                              {chapter.content ? `${chapter.content.substring(0, 80)}...` : ''}
                              {!chapter.content && <span data-i18n="admin.courses.noContentYet">Belum ada konten</span>}
                            </p>
                          </div>
                          <div class="flex items-center space-x-3 ml-4">
                            <a
                              href={`/courses/${course.slug}/chapter/${chapter.order}`}
                              class="text-green-600 hover:text-green-900 text-sm"
                              target="_blank"
                              data-i18n="courses.view"
                            >
                              View
                            </a>
                            <a
                              href={`/admin/courses/${course.id}/chapters/${chapter.id}/edit`}
                              class="text-blue-600 hover:text-blue-900 text-sm font-medium"
                              data-i18n="common.edit"
                            >
                              Edit
                            </a>
                          </div>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p class="text-sm text-gray-500 italic" data-i18n="admin.courses.noChaptersYet">No chapters yet. Click "Add Chapter" to get started.</p>
                  )}
                </div>
                <div>
                  <a
                    href={`/admin/courses/${course.id}/chapters/new`}
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                    data-i18n="admin.courses.addChapter"
                  >
                    + Add Chapter
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Course Form Actions -->
        <div class="flex justify-between">
          <button
            type="button"
            id="delete-btn"
            class="bg-red-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            data-i18n="admin.courses.deleteCourse"
          >
            Delete Course
          </button>
          <div class="flex space-x-3">
            <a
              href="/admin/courses"
              class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
              data-i18n="common.cancel"
            >
              Cancel
            </a>
            <button
              type="submit"
              form="course-form"
              class="bg-blue-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              data-i18n="admin.courses.saveChanges"
            >
              Save Changes
            </button>
          </div>
        </div>
      </form>
    </div>


    <!-- Quiz Management Section (Outside course form) -->
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6" id="quizzes-section">
          <div class="md:grid md:grid-cols-3 md:gap-6">
            <div class="md:col-span-1">
              <h3 class="text-lg font-medium leading-6 text-gray-900" data-i18n="admin.courses.quizzes">Kuis</h3>
              <p class="mt-1 text-sm text-gray-500" data-i18n="admin.courses.quizzesDesc">
                Impor dan kelola kuis kursus
              </p>
            </div>
            <div class="mt-5 md:mt-0 md:col-span-2">
              <!-- Import Options Tabs -->
              <div class="mb-4 border-b border-gray-200">
                <nav class="-mb-px flex space-x-4">
                  <button
                    type="button"
                    id="quiz-tab"
                    class="tab-button active py-2 px-4 border-b-2 border-blue-500 text-sm font-medium text-blue-600 cursor-pointer"
                    onclick="
                      document.getElementById('quiz-import-section').classList.remove('hidden');
                      document.getElementById('essay-import-section').classList.add('hidden');
                      this.classList.add('border-blue-500', 'text-blue-600');
                      this.classList.remove('border-transparent', 'text-gray-500');
                      document.getElementById('essay-tab').classList.remove('border-blue-500', 'text-blue-600');
                      document.getElementById('essay-tab').classList.add('border-transparent', 'text-gray-500');
                    "
                    data-i18n="admin.courses.multipleChoiceQuizTab"
                  >
                    Kuis Pilihan Ganda
                  </button>
                  <button
                    type="button"
                    id="essay-tab"
                    class="tab-button py-2 px-4 border-b-2 border-transparent text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300 cursor-pointer"
                    onclick="
                      document.getElementById('essay-import-section').classList.remove('hidden');
                      document.getElementById('quiz-import-section').classList.add('hidden');
                      this.classList.add('border-blue-500', 'text-blue-600');
                      this.classList.remove('border-transparent', 'text-gray-500');
                      document.getElementById('quiz-tab').classList.remove('border-blue-500', 'text-blue-600');
                      document.getElementById('quiz-tab').classList.add('border-transparent', 'text-gray-500');
                    "
                    data-i18n="admin.courses.essayQuizTab"
                  >
                    Soal Essay
                  </button>
                </nav>
              </div>

              <!-- Import Quiz Section -->
              <div id="quiz-import-section" class="mb-6 p-4 border-2 border-dashed border-gray-300 rounded-lg">
                <h4 class="text-sm font-medium text-gray-900 mb-3" data-i18n="admin.courses.importQuizFromMarkdown">Impor Kuis dari Markdown</h4>
                <form id="quiz-import-form" method="POST" action="/api/admin/quiz/import" enctype="multipart/form-data">
                  <input type="hidden" name="courseId" value={course.id} />
                  
                  <div class="space-y-3">
                    <div>
                      <label for="quiz-title" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.quizTitle">
                        Quiz Title
                      </label>
                      <input
                        type="text"
                        name="title"
                        id="quiz-title"
                        required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        data-i18n-placeholder="admin.courses.quizTitlePlaceholder"
                        placeholder="Misalnya, Kuis Bab 1"
                      />
                    </div>
                    
                    <div class="grid grid-cols-2 gap-3">
                      <div>
                        <label for="time-limit" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.timeLimit">
                          Batas Waktu (menit)
                        </label>
                        <input
                          type="number"
                          name="timeLimit"
                          id="time-limit"
                          min="1"
                          class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          data-i18n-placeholder="admin.courses.timeLimitPlaceholder"
                          placeholder="30"
                        />
                      </div>
                      
                      <div>
                        <label for="max-attempts" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.maxAttempts">
                          Maksimum Percobaan
                        </label>
                        <input
                          type="number"
                          name="maxAttempts"
                          id="max-attempts"
                          min="1"
                          class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          data-i18n-placeholder="admin.courses.maxAttemptsPlaceholder"
                          placeholder="3"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label for="quiz-file" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.quizFile">
                        File Kuis (.md)
                      </label>
                      <input
                        type="file"
                        id="quiz-file"
                        name="file"
                        accept=".md,.txt"
                        required
                        class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                      />
                      <p class="mt-1 text-xs text-gray-500" data-i18n="admin.courses.quizFileDesc">
                        Upload a Markdown file with quiz questions. Format: <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">## Pertanyaan</code> untuk pertanyaan, <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">### Pilihan</code> untuk opsi, dan <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">&lt;solution_title&gt; Jawaban: A</code> untuk kunci jawaban.
                      </p>
                    </div>
                    
                    <button
                      type="submit"
                      id="quiz-import-btn"
                      class="w-full bg-blue-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                      data-i18n="admin.courses.importQuiz"
                    >
                      Impor Kuis
                    </button>
                  </div>
                </form>
                
                <div id="import-status" class="mt-3 hidden"></div>
              </div>

              <!-- Import Essay Section -->
              <div id="essay-import-section" class="mb-6 p-4 border-2 border-dashed border-gray-300 rounded-lg hidden">
                <h4 class="text-sm font-medium text-gray-900 mb-3" data-i18n="admin.courses.importEssayFromMarkdown">Impor Soal Essay dari Markdown</h4>
                <form id="essay-import-form" method="POST" action="/api/admin/essay/import" enctype="multipart/form-data">
                  <input type="hidden" name="courseId" value={course.id} />
                  
                  <div class="space-y-3">
                    <div>
                      <label for="essay-title" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.essayTitle">
                        Judul Soal Essay
                      </label>
                      <input
                        type="text"
                        id="essay-title"
                        name="title"
                        required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-blue-500 focus:border-blue-500"
                        data-i18n-placeholder="admin.courses.essayTitlePlaceholder"
                        placeholder="Misalnya, Soal Essay Bab 1"
                      />
                    </div>
                    
                    <div>
                      <label for="essay-file" class="block text-sm font-medium text-gray-700" data-i18n="admin.courses.essayFile">
                        File Soal Essay (.md)
                      </label>
                      <input
                        type="file"
                        id="essay-file"
                        name="file"
                        accept=".md,.txt"
                        required
                        class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100"
                      />
                      <p class="mt-1 text-xs text-gray-500" data-i18n="admin.courses.essayFileDesc">
                        Upload a Markdown file with essay questions. Format: <code class="text-xs bg-gray-100 px-1 py-0.5 rounded"># Question Title</code> for questions, <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">### Sub-question</code> for sub-questions.
                      </p>
                    </div>
                    
                    <button
                      type="submit"
                      class="w-full bg-purple-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                      data-i18n="admin.courses.importEssay"
                    >
                      Impor Soal Essay
                    </button>
                  </div>
                </form>
                
                <div id="essay-import-status" class="mt-3 hidden"></div>
              </div>
              
              <!-- Quiz List -->
              <div class="space-y-2">
                <p class="text-sm font-medium text-gray-700" data-i18n="admin.courses.existingQuizzes">Kuis yang Ada</p>
                <div id="quiz-list" class="text-sm text-gray-500" data-i18n="admin.courses.loadingQuizzes">
                  Memuat kuis...
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <script>
          console.log('=== QUIZ SCRIPT STARTING ===');
          const courseId = parseInt('{course.id}');
          const course = { id: courseId };
          console.log('Course ID:', courseId);
          
          // Tab switching function
          function switchTabs(showEssay) {
            console.log('Switching tabs, showEssay:', showEssay);
            const quizTab = document.getElementById('quiz-tab');
            const essayTab = document.getElementById('essay-tab');
            const quizSection = document.getElementById('quiz-import-section');
            const essaySection = document.getElementById('essay-import-section');
            
            console.log('Elements found:', { quizTab: !!quizTab, essayTab: !!essayTab, quizSection: !!quizSection, essaySection: !!essaySection });
            
            if (showEssay) {
              if (essaySection) {
                essaySection.classList.remove('hidden');
                console.log('Showing essay section');
              }
              if (quizSection) {
                quizSection.classList.add('hidden');
                console.log('Hiding quiz section');
              }
              if (essayTab) {
                essayTab.classList.add('border-blue-500', 'text-blue-600');
                essayTab.classList.remove('border-transparent', 'text-gray-500');
                console.log('Activating essay tab');
              }
              if (quizTab) {
                quizTab.classList.remove('border-blue-500', 'text-blue-600');
                quizTab.classList.add('border-transparent', 'text-gray-500');
                console.log('Deactivating quiz tab');
              }
            } else {
              if (quizSection) {
                quizSection.classList.remove('hidden');
                console.log('Showing quiz section');
              }
              if (essaySection) {
                essaySection.classList.add('hidden');
                console.log('Hiding essay section');
              }
              if (quizTab) {
                quizTab.classList.add('border-blue-500', 'text-blue-600');
                quizTab.classList.remove('border-transparent', 'text-gray-500');
                console.log('Activating quiz tab');
              }
              if (essayTab) {
                essayTab.classList.remove('border-blue-500', 'text-blue-600');
                essayTab.classList.add('border-transparent', 'text-gray-500');
                console.log('Deactivating essay tab');
              }
            }
          }
          
          // Set up event listeners when DOM is ready
          function setupTabs() {
            const quizTab = document.getElementById('quiz-tab');
            const essayTab = document.getElementById('essay-tab');
            
            console.log('Setting up tabs:', { quizTab: !!quizTab, essayTab: !!essayTab });
            
            if (quizTab) {
              quizTab.onclick = function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('Quiz tab clicked via onclick');
                switchTabs(false);
                return false;
              };
              quizTab.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('Quiz tab clicked via addEventListener');
                switchTabs(false);
                return false;
              });
              console.log('Quiz tab listeners attached');
            }
            
            if (essayTab) {
              essayTab.onclick = function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('Essay tab clicked via onclick');
                switchTabs(true);
                return false;
              };
              essayTab.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('Essay tab clicked via addEventListener');
                switchTabs(true);
                return false;
              });
              console.log('Essay tab listeners attached');
            }
          }
          
          // Try multiple times to ensure it works
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupTabs);
          } else {
            setupTabs();
          }
          
          // Also try after a short delay as backup
          setTimeout(setupTabs, 50);
          setTimeout(setupTabs, 200);
          setTimeout(setupTabs, 500);
          
          // Wait for DOM and set up forms
          function setupQuizForms() {
            console.log('Setting up quiz forms...');
            
            // Quiz import functionality
            const quizForm = document.getElementById('quiz-import-form');
            if (quizForm) {
              console.log('Quiz form found, attaching handler');
              quizForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Quiz form submitted');
              
              const form = e.target as HTMLFormElement;
              const statusDiv = document.getElementById('import-status');
              const submitBtn = document.getElementById('quiz-import-btn') as HTMLButtonElement;
              
              if (!statusDiv || !submitBtn) {
                console.error('Required elements not found');
                return;
              }
              
              // Validate form
              const title = (form.querySelector('#quiz-title') as HTMLInputElement)?.value;
              const file = (form.querySelector('#quiz-file') as HTMLInputElement)?.files?.[0];
              
              if (!title || !file) {
                statusDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded text-red-700';
                statusDiv.textContent = '‚ùå Harap isi judul kuis dan pilih file.';
                statusDiv.classList.remove('hidden');
                return;
              }
              
              // Disable button during submission
              submitBtn.disabled = true;
              submitBtn.textContent = 'Mengimpor...';
              
              // Show loading
              statusDiv.className = 'mt-3 p-3 bg-blue-50 border border-blue-200 rounded text-blue-700';
              statusDiv.textContent = 'Mengimpor kuis...';
              statusDiv.classList.remove('hidden');
              
              const formData = new FormData(form);
              
              try {
                const response = await fetch('/api/admin/quiz/import', {
                  method: 'POST',
                  body: formData
                });
                
                const result = await response.json();
                
                if (response.ok) {
                  statusDiv.className = 'mt-3 p-3 bg-green-50 border border-green-200 rounded text-green-700';
                  statusDiv.textContent = `‚úÖ Berhasil mengimpor ${result.questions?.length || 0} pertanyaan!`;
                  form.reset();
                  loadQuizzes();
                } else {
                  statusDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded text-red-700';
                  statusDiv.textContent = `‚ùå Kesalahan: ${result.error || 'Gagal mengimpor kuis'}`;
                }
              } catch (error) {
                statusDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded text-red-700';
                statusDiv.textContent = `‚ùå Kesalahan: ${error instanceof Error ? error.message : 'Kesalahan tidak dikenal'}`;
              } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Impor Kuis';
              }
              });
            } else {
              console.error('Quiz form not found');
            }
            
            // Essay import functionality
            const essayForm = document.getElementById('essay-import-form');
            if (essayForm) {
              console.log('Essay form found, attaching handler');
              essayForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Essay form submitted');
              
              const form = e.target as HTMLFormElement;
              const statusDiv = document.getElementById('essay-import-status');
              const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
              
              if (!statusDiv) return;
              
              // Validate
              const title = (form.querySelector('#essay-title') as HTMLInputElement)?.value;
              const file = (form.querySelector('#essay-file') as HTMLInputElement)?.files?.[0];
              
              if (!title || !file) {
                statusDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded text-red-700';
                statusDiv.textContent = '‚ùå Harap isi judul dan pilih file.';
                statusDiv.classList.remove('hidden');
                return;
              }
              
              if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = 'Mengimpor...';
              }
              
              statusDiv.className = 'mt-3 p-3 bg-blue-50 border border-blue-200 rounded text-blue-700';
              statusDiv.textContent = 'Mengimpor soal essay...';
              statusDiv.classList.remove('hidden');
              
              const formData = new FormData(form);
              
              try {
                const response = await fetch('/api/admin/essay/import', {
                  method: 'POST',
                  body: formData
                });
                
                const result = await response.json();
                console.log('Essay import response:', result);
                
                if (response.ok) {
                  statusDiv.className = 'mt-3 p-3 bg-green-50 border border-green-200 rounded text-green-700';
                  const count = result.problemCount || result.problems?.length || 0;
                  statusDiv.textContent = `‚úÖ Berhasil mengimpor ${count} soal essay!`;
                  form.reset();
                  loadQuizzes();
                } else {
                  statusDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded text-red-700';
                  statusDiv.textContent = `‚ùå Kesalahan: ${result.error || 'Gagal mengimpor soal essay'}`;
                }
              } catch (error) {
                statusDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded text-red-700';
                statusDiv.textContent = `‚ùå Kesalahan: ${error instanceof Error ? error.message : 'Kesalahan tidak dikenal'}`;
              } finally {
                if (submitBtn) {
                  submitBtn.disabled = false;
                  submitBtn.textContent = 'Impor Soal Essay';
                }
              }
              });
            } else {
              console.error('Essay form not found');
            }
          }
          
          // Helper to get translation text from element or fallback
          function getTranslationText(key: string): string {
            const element = document.querySelector(`[data-i18n="${key}"]`);
            if (element) {
              return element.textContent || key;
            }
            // Fallback translations
            const locale = localStorage.getItem('locale') || 'id';
            const translations: Record<string, string> = {
              'admin.courses.noQuizzesYet': locale === 'id' ? 'Belum ada kuis. Impor kuis di atas untuk memulai.' : 'No quizzes yet. Import quizzes above to get started.',
              'quiz.simpleBadge': locale === 'id' ? 'Pilihan Tunggal' : 'Single Choice',
              'quiz.complexBadge': locale === 'id' ? 'Pilihan Ganda' : 'Multiple Choice',
              'admin.courses.essayQuestions': locale === 'id' ? 'soal essay' : 'essay questions',
              'admin.courses.questions': locale === 'id' ? 'pertanyaan' : 'questions',
              'common.delete': locale === 'id' ? 'Hapus' : 'Delete'
            };
            return translations[key] || key;
          }
          
          // Load quizzes for this course
          async function loadQuizzes() {
            const quizList = document.getElementById('quiz-list');
            if (!quizList) return;
            
            try {
              const response = await fetch(`/api/admin/quiz?courseId=${course.id}`);
              if (response.ok) {
                const quizzes = await response.json();
                if (quizzes.length === 0) {
                  const noQuizzesText = getTranslationText('admin.courses.noQuizzesYet');
                  quizList.innerHTML = `<p class="text-sm text-gray-500 italic">${noQuizzesText}</p>`;
                } else {
                  quizList.innerHTML = quizzes.map((quiz: any) => {
                    const quizType = quiz.settings?.type || quiz.type || 'multiple-choice';
                    const isEssay = quizType === 'essay';
                    const isComplex = quizType === 'complex-multiple-choice';
                    
                    let badgeClass, badgeText;
                    if (isEssay) {
                      badgeClass = 'bg-purple-100 text-purple-800';
                      badgeText = 'Soal Essay'; // This could be translated but it's a type label
                    } else if (isComplex) {
                      badgeClass = 'bg-purple-100 text-purple-800';
                      badgeText = getTranslationText('quiz.complexBadge');
                    } else {
                      badgeClass = 'bg-blue-100 text-blue-800';
                      badgeText = getTranslationText('quiz.simpleBadge');
                    }
                    
                    const locale = localStorage.getItem('locale') || 'id';
                    const pertanyaanText = getTranslationText('admin.courses.questions');
                    const countText = isEssay 
                      ? `${quiz.settings?.problemCount || 0} ${getTranslationText('admin.courses.essayQuestions')}`
                      : `${quiz.questionCount || 0} ${pertanyaanText}`;
                    
                    const deleteText = getTranslationText('common.delete');
                    
                    return `
                    <div class="p-3 border border-gray-200 rounded">
                      <div class="flex justify-between items-center">
                        <div class="flex-1">
                          <div class="flex items-center gap-2">
                            <p class="font-medium text-gray-900">${quiz.title}</p>
                            <span class="px-2 py-0.5 text-xs font-semibold rounded-full ${badgeClass}">
                              ${badgeText}
                            </span>
                          </div>
                          <p class="text-xs text-gray-500 mt-1">${countText}</p>
                        </div>
                        <button class="text-red-600 hover:text-red-900 text-sm">
                          ${deleteText}
                        </button>
                      </div>
                    </div>
                  `;
                  }).join('');
                }
              } else {
                const noQuizzesText = getTranslationText('admin.courses.noQuizzesYet');
                quizList.innerHTML = `<p class="text-sm text-gray-500 italic">${noQuizzesText}</p>`;
              }
            } catch (error) {
              const noQuizzesText = getTranslationText('admin.courses.noQuizzesYet');
              quizList.innerHTML = `<p class="text-sm text-gray-500 italic">${noQuizzesText}</p>`;
            }
          }
          
          // Initialize forms
          setupQuizForms();
          
          // Initial load
          loadQuizzes();
        </script>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ courseId: course.id }}>
  // Translation helper - get translation key from data attributes or use fallback
  function getTranslation(key: string, params?: Record<string, string>): string {
    // Try to get from element with data-i18n attribute first
    const element = document.querySelector(`[data-i18n="${key}"]`);
    if (element) {
      let text = element.textContent || '';
      if (params) {
        Object.keys(params).forEach(k => {
          text = text.replace(`{${k}}`, params[k]);
        });
      }
      return text;
    }
    
    // Fallback: try to get from localStorage locale and translation files
    const locale = localStorage.getItem('locale') || 'id';
    const translations: Record<string, any> = {
      'admin.courses.errorUpdatingCourse': locale === 'id' ? 'Kesalahan memperbarui kursus: {error}' : 'Error updating course: {error}',
      'admin.courses.errorUpdatingCourseGeneric': locale === 'id' ? 'Kesalahan memperbarui kursus. Silakan coba lagi.' : 'Error updating course. Please try again.',
      'admin.courses.confirmDeleteCourse': locale === 'id' ? 'Apakah Anda yakin ingin menghapus kursus ini? Tindakan ini tidak dapat dibatalkan.' : 'Are you sure you want to delete this course? This action cannot be undone.',
      'admin.courses.errorDeletingCourse': locale === 'id' ? 'Kesalahan menghapus kursus: {error}' : 'Error deleting course: {error}',
      'admin.courses.errorDeletingCourseGeneric': locale === 'id' ? 'Kesalahan menghapus kursus. Silakan coba lagi.' : 'Error deleting course. Please try again.'
    };
    
    let translation = translations[key] || key;
    if (params) {
      Object.keys(params).forEach(k => {
        translation = translation.replace(`{${k}}`, params[k]);
      });
    }
    return translation;
  }

  // Form submission
  document.getElementById('course-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const courseData = {
      title: formData.get('title'),
      slug: formData.get('slug'),
      description: formData.get('description')
    };
    
    try {
      const response = await fetch(`/api/admin/courses/${courseId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(courseData)
      });
      
      if (response.ok) {
        window.location.href = '/admin/courses';
      } else {
        const error = await response.json();
        alert(getTranslation('admin.courses.errorUpdatingCourse', { error: error.error || 'Unknown error' }));
      }
    } catch (error) {
      console.error('Course update error:', error);
      alert(getTranslation('admin.courses.errorUpdatingCourseGeneric'));
    }
  });

  // Delete confirmation
  document.getElementById('delete-btn')?.addEventListener('click', async () => {
    if (!confirm(getTranslation('admin.courses.confirmDeleteCourse'))) {
      return;
    }

    try {
      const response = await fetch(`/api/admin/courses/${courseId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        window.location.href = '/admin/courses';
      } else {
        const error = await response.json();
        alert(getTranslation('admin.courses.errorDeletingCourse', { error: error.error || 'Unknown error' }));
      }
    } catch (error) {
      console.error('Course deletion error:', error);
      alert(getTranslation('admin.courses.errorDeletingCourseGeneric'));
    }
  });
</script>

