---
export const prerender = false;

import Layout from '../../../../components/Layout.astro';
import { getQuiz } from '../../../../lib/quizzes';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/admin/quizzes');
}

const quiz = await getQuiz(parseInt(id));

if (!quiz) {
  return Astro.redirect('/admin/quizzes');
}

const settings = quiz.settings || {};
// Handle both array and object formats for questions
let questions: any[] = [];
try {
  if (Array.isArray(quiz.questions)) {
    questions = quiz.questions;
  } else if (quiz.questions && typeof quiz.questions === 'object') {
    // Handle problem set format
    if (quiz.questions.type === 'multiple-choice-problem-set' && quiz.questions.problems) {
      questions = [quiz.questions];
    } else if (quiz.questions.questions && Array.isArray(quiz.questions.questions)) {
      // Handle nested questions property
      questions = quiz.questions.questions;
    } else {
      // Try to extract questions from object
      questions = [];
    }
  }
} catch (error) {
  console.error('Error parsing questions:', error);
  questions = [];
}

// Normalize questions to a consistent format
function normalizeQuestions(qs: any[]): any[] {
  const normalized: any[] = [];
  
  qs.forEach((q, index) => {
    // Handle MC problem set format
    if (q.type === 'multiple-choice-problem-set' && q.problems) {
      q.problems.forEach((p: any, pIndex: number) => {
        normalized.push({
          id: p.id || normalized.length + 1,
          type: 'multiple-choice',
          question: p.question || '',
          options: Array.isArray(p.options) 
            ? p.options.map((opt: any) => typeof opt === 'string' ? opt : (opt.text || opt.id || ''))
            : [],
          correctAnswer: typeof p.correctAnswer === 'number' 
            ? p.correctAnswer 
            : (typeof p.correctAnswer === 'string' && p.correctAnswer.length > 0 
                ? p.correctAnswer.charCodeAt(0) - 64 
                : 1),
          images: p.questionImages || [],
          metadata: {
            solution: p.solution || '',
            solutionImages: p.solutionImages || []
          }
        });
      });
    } else {
      // Handle standard format
      normalized.push({
        id: q.id || normalized.length + 1,
        type: q.type || 'multiple-choice',
        question: q.question || '',
        options: Array.isArray(q.options) ? q.options : [],
        correctAnswer: q.correctAnswer || 1,
        images: q.images || [],
        metadata: q.metadata || {}
      });
    }
  });
  
  return normalized;
}

const normalizedQuestions = normalizeQuestions(questions);

// Debug: Log quiz data structure
console.log('Quiz questions structure:', JSON.stringify(quiz.questions, null, 2));
console.log('Normalized questions count:', normalizedQuestions.length);
---

<Layout title={`Edit ${quiz.title}`}>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow mb-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16 items-center">
          <div class="flex items-center">
            <a href="/admin/quizzes" class="text-gray-700 hover:text-blue-600 mr-4">‚Üê Back to Quizzes</a>
            <h1 class="text-2xl font-bold text-gray-900">Edit Quiz</h1>
          </div>
          <div class="flex items-center space-x-4">
            <a href={`/quizzes/${id}`} target="_blank" class="text-green-600 hover:text-green-700">
              Preview
            </a>
            <button
              id="delete-quiz-btn"
              class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 text-sm"
            >
              Delete Quiz
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Quiz Edit Form -->
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <form id="quiz-form" class="space-y-6">
        <input type="hidden" name="quizId" value={id} />
        
        <!-- Quiz Info -->
        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-6">Quiz Information</h3>
          
          <div class="space-y-4">
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700">
                Quiz Title *
              </label>
              <input
                type="text"
                name="title"
                id="title"
                required
                value={quiz.title}
                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              />
            </div>

            <div>
              <label for="description" class="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                name="description"
                id="description"
                rows="3"
                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              >{settings.description || ''}</textarea>
            </div>

            <div class="grid grid-cols-2 gap-4">
              <div>
                <label for="timeLimit" class="block text-sm font-medium text-gray-700">
                  Time Limit (minutes)
                </label>
                <input
                  type="number"
                  name="timeLimit"
                  id="timeLimit"
                  min="1"
                  value={settings.timeLimit ? Math.floor(settings.timeLimit / 60) : ''}
                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>

              <div>
                <label for="maxAttempts" class="block text-sm font-medium text-gray-700">
                  Max Attempts
                </label>
                <input
                  type="number"
                  name="maxAttempts"
                  id="maxAttempts"
                  min="1"
                  value={settings.maxAttempts || ''}
                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>
            </div>
          </div>
        </div>

        <!-- Questions -->
        <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-medium text-gray-900">
              Questions (<span id="question-count">{normalizedQuestions.length}</span>)
            </h3>
            <div class="text-xs text-gray-500" id="question-debug">
              Raw: {Array.isArray(quiz.questions) ? quiz.questions.length : (quiz.questions ? 'object' : 'null')} | Normalized: {normalizedQuestions.length}
            </div>
            <button
              type="button"
              id="add-question-btn"
              class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 text-sm"
            >
              + Add Question
            </button>
          </div>

          <div id="questions-container" class="space-y-6">
            <!-- Questions will be loaded here -->
          </div>
        </div>

        <!-- Submit -->
        <div class="flex justify-end space-x-4">
          <a href="/admin/quizzes" class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
            Cancel
          </a>
          <button
            type="submit"
            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Update Quiz
          </button>
        </div>
      </form>
    </div>
  </div>

  <style>
    .question-editor {
      border: 2px solid #e5e7eb;
      border-radius: 0.5rem;
      padding: 1.5rem;
      background: #f9fafb;
    }

    .question-editor.expanded {
      border-color: #3b82f6;
      background: white;
    }

    .option-input-group {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin-bottom: 0.5rem;
    }

    .option-input-group input[type="radio"] {
      margin-top: 0;
    }
  </style>

  <script define:vars={{questions: normalizedQuestions, quizId: id}}>
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeEditor);
    } else {
      initializeEditor();
    }

    function initializeEditor() {
      let questionCounter = questions.length > 0 ? Math.max(...questions.map(q => q.id || 0)) : 0;
      let questionsData = [...questions];

      console.log('Quiz Editor - Questions loaded:', questions.length, questions);
      console.log('Quiz Editor - Question counter:', questionCounter);

      const questionsContainer = document.getElementById('questions-container');
      const addQuestionBtn = document.getElementById('add-question-btn');
      const quizForm = document.getElementById('quiz-form');
      const deleteQuizBtn = document.getElementById('delete-quiz-btn');

      if (!questionsContainer) {
        console.error('Questions container not found!');
        return;
      }

      // Render a question editor
      function renderQuestion(question: any, index: number) {
      const questionId = question.id || ++questionCounter;
      const isExpanded = question.isExpanded || false;
      
      const questionDiv = document.createElement('div');
      questionDiv.className = `question-editor ${isExpanded ? 'expanded' : ''}`;
      questionDiv.dataset.questionId = questionId;
      questionDiv.dataset.index = index;

      const options = Array.isArray(question.options) ? question.options : [];
      const correctAnswer = question.correctAnswer || 1;
      const solution = question.metadata?.solution || '';

      questionDiv.innerHTML = `
        <div class="flex items-start justify-between mb-4">
          <div class="flex-1">
            <h4 class="text-md font-semibold text-gray-900">Question ${index + 1}</h4>
          </div>
          <div class="flex items-center space-x-2">
            <button
              type="button"
              class="toggle-question-btn text-blue-600 hover:text-blue-800 text-sm"
            >
              ${isExpanded ? '‚ñº Collapse' : '‚ñ∂ Expand'}
            </button>
            <button
              type="button"
              class="delete-question-btn text-red-600 hover:text-red-800 text-sm"
            >
              üóëÔ∏è Delete
            </button>
          </div>
        </div>

        <div class="question-content" style="display: ${isExpanded ? 'block' : 'none'}">
          <!-- Question Text -->
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Question Text *
            </label>
            <textarea
              class="question-text w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              rows="4"
              required
              placeholder="Enter the question text (supports LaTeX: $...$ or $$...$$)"
            >${escapeHtml(question.question || '')}</textarea>
          </div>

          <!-- Options -->
          <div class="mb-4">
            <div class="flex items-center justify-between mb-2">
              <label class="block text-sm font-medium text-gray-700">
                Options *
              </label>
              <button
                type="button"
                class="add-option-btn text-blue-600 hover:text-blue-800 text-sm"
              >
                + Add Option
              </button>
            </div>
            <div class="options-container space-y-2">
              ${options.map((opt: string, optIndex: number) => `
                <div class="option-input-group">
                  <input
                    type="radio"
                    name="correct-${questionId}"
                    value="${optIndex + 1}"
                    ${optIndex + 1 === correctAnswer ? 'checked' : ''}
                    class="correct-answer-radio"
                  />
                  <input
                    type="text"
                    class="option-text flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    value="${escapeHtml(opt)}"
                    placeholder="Option ${optIndex + 1}"
                    required
                  />
                  <button
                    type="button"
                    class="delete-option-btn text-red-600 hover:text-red-800 text-sm px-2"
                    ${options.length <= 2 ? 'disabled' : ''}
                  >
                    √ó
                  </button>
                </div>
              `).join('')}
            </div>
            <p class="mt-2 text-xs text-gray-500">
              Select the radio button to mark the correct answer
            </p>
          </div>

          <!-- Solution -->
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Solution (Optional)
            </label>
            <textarea
              class="solution-text w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              rows="3"
              placeholder="Enter solution explanation (supports LaTeX)"
            >${escapeHtml(solution)}</textarea>
          </div>
        </div>
      `;

      // Add event listeners
      const toggleBtn = questionDiv.querySelector('.toggle-question-btn');
      toggleBtn?.addEventListener('click', () => {
        const content = questionDiv.querySelector('.question-content') as HTMLElement;
        const isExpanded = content.style.display === 'block';
        content.style.display = isExpanded ? 'none' : 'block';
        questionDiv.classList.toggle('expanded');
        toggleBtn.textContent = isExpanded ? '‚ñ∂ Expand' : '‚ñº Collapse';
      });

      const deleteBtn = questionDiv.querySelector('.delete-question-btn');
      deleteBtn?.addEventListener('click', () => {
        if (confirm('Are you sure you want to delete this question?')) {
          questionDiv.remove();
          updateQuestionIndices();
          updateQuestionCount();
        }
      });

      // Add option
      const addOptionBtn = questionDiv.querySelector('.add-option-btn');
      addOptionBtn?.addEventListener('click', () => {
        const container = questionDiv.querySelector('.options-container');
        const optionCount = container?.children.length || 0;
        if (optionCount >= 10) {
          alert('Maximum 10 options allowed');
          return;
        }

        const newOption = document.createElement('div');
        newOption.className = 'option-input-group';
        newOption.innerHTML = `
          <input
            type="radio"
            name="correct-${questionId}"
            value="${optionCount + 1}"
            class="correct-answer-radio"
          />
          <input
            type="text"
            class="option-text flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            placeholder="Option ${optionCount + 1}"
            required
          />
          <button
            type="button"
            class="delete-option-btn text-red-600 hover:text-red-800 text-sm px-2"
          >
            √ó
          </button>
        `;

        const deleteOptBtn = newOption.querySelector('.delete-option-btn');
        deleteOptBtn?.addEventListener('click', () => {
          const container = deleteOptBtn.closest('.options-container');
          if (container && container.children.length > 2) {
            newOption.remove();
            updateRadioValues(questionDiv);
          } else {
            alert('At least 2 options are required');
          }
        });

        container?.appendChild(newOption);
      });

      // Delete option
      questionDiv.querySelectorAll('.delete-option-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const container = (e.target as HTMLElement).closest('.options-container');
          if (container && container.children.length > 2) {
            (e.target as HTMLElement).closest('.option-input-group')?.remove();
            updateRadioValues(questionDiv);
          } else {
            alert('At least 2 options are required');
          }
        });
      });

      return questionDiv;
    }

    function updateRadioValues(questionDiv: HTMLElement) {
      const radios = questionDiv.querySelectorAll('.correct-answer-radio');
      radios.forEach((radio, index) => {
        (radio as HTMLInputElement).value = String(index + 1);
        const textInput = radio.parentElement?.querySelector('.option-text') as HTMLInputElement;
        if (textInput) {
          textInput.placeholder = `Option ${index + 1}`;
        }
      });
    }

    function updateQuestionIndices() {
      const questions = questionsContainer.querySelectorAll('.question-editor');
      questions.forEach((q, index) => {
        const title = q.querySelector('h4');
        if (title) title.textContent = `Question ${index + 1}`;
        q.dataset.index = String(index);
      });
    }

    function updateQuestionCount() {
      const count = questionsContainer.children.length;
      const countEl = document.getElementById('question-count');
      if (countEl) countEl.textContent = String(count);
    }

    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function collectQuestions(): any[] {
      const questions: any[] = [];
      const questionEditors = questionsContainer.querySelectorAll('.question-editor');

      questionEditors.forEach((editor, index) => {
        const questionId = parseInt(editor.getAttribute('data-question-id') || String(index + 1));
        const questionText = (editor.querySelector('.question-text') as HTMLTextAreaElement)?.value || '';
        const solutionText = (editor.querySelector('.solution-text') as HTMLTextAreaElement)?.value || '';
        
        const options: string[] = [];
        editor.querySelectorAll('.option-text').forEach(input => {
          const value = (input as HTMLInputElement).value.trim();
          if (value) options.push(value);
        });

        const correctRadio = editor.querySelector('.correct-answer-radio:checked') as HTMLInputElement;
        const correctAnswer = correctRadio ? parseInt(correctRadio.value) : 1;

        if (questionText && options.length >= 2) {
          questions.push({
            id: questionId,
            type: 'multiple-choice',
            question: questionText,
            options: options,
            correctAnswer: correctAnswer,
            images: [],
            metadata: {
              solution: solutionText,
              solutionImages: []
            }
          });
        }
      });

      return questions;
    }

    // Initialize questions
    console.log('Initializing questions. Container:', questionsContainer);
    console.log('Questions to render:', questions.length, questions);
    
    if (questions.length > 0) {
      questions.forEach((q, index) => {
        try {
          console.log(`Rendering question ${index + 1}:`, q);
          const editor = renderQuestion({ ...q, isExpanded: true }, index);
          questionsContainer.appendChild(editor);
        } catch (error) {
          console.error(`Error rendering question ${index + 1}:`, error, q);
        }
      });
      updateQuestionCount();
      console.log('Questions rendered. Total editors:', questionsContainer.querySelectorAll('.question-editor').length);
    } else {
      questionsContainer.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <p class="text-sm">No questions yet. Click "+ Add Question" to get started.</p>
        </div>
      `;
    }

    // Add new question
    addQuestionBtn?.addEventListener('click', () => {
      const newQuestion = {
        id: ++questionCounter,
        type: 'multiple-choice',
        question: '',
        options: ['', ''],
        correctAnswer: 1,
        images: [],
        metadata: { solution: '', solutionImages: [] },
        isExpanded: true
      };
      const editor = renderQuestion(newQuestion, questionsContainer.children.length);
      questionsContainer.appendChild(editor);
      updateQuestionCount();
    });

    // Submit form
    quizForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const questions = collectQuestions();
      
      console.log('Submitting quiz with questions:', questions.length);
      
      if (questions.length === 0) {
        alert('Please add at least one question. If questions are not showing, please refresh the page.');
        console.error('No questions found. Question editors:', questionsContainer.querySelectorAll('.question-editor').length);
        return;
      }

      const formData = {
        title: (document.getElementById('title') as HTMLInputElement).value,
        description: (document.getElementById('description') as HTMLTextAreaElement).value,
        timeLimit: parseInt((document.getElementById('timeLimit') as HTMLInputElement).value) || undefined,
        maxAttempts: parseInt((document.getElementById('maxAttempts') as HTMLInputElement).value) || undefined,
        questions: questions
      };

      console.log('Form data:', formData);

      try {
        const response = await fetch(`/api/admin/quiz/${quizId}/update`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (response.ok) {
          alert('Quiz updated successfully!');
          window.location.reload();
        } else {
          console.error('Update error:', result);
          alert('Error: ' + (result.error || 'Failed to update quiz'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while updating the quiz: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    });

    // Delete quiz
    deleteQuizBtn?.addEventListener('click', async () => {
      if (!confirm(`Are you sure you want to delete "${quiz.title}"? This action cannot be undone.`)) {
        return;
      }

      try {
        const response = await fetch(`/api/admin/quiz/${quizId}/delete`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (response.ok) {
          alert('Quiz deleted successfully!');
          window.location.href = '/admin/quizzes';
        } else {
          alert('Error: ' + (result.error || 'Failed to delete quiz'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while deleting the quiz');
      }
    });

      updateQuestionCount();
    } // End of initializeEditor
  </script>
</Layout>
