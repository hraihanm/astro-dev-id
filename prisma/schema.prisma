generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  password  String
  role      String        @default("student")
  createdAt DateTime      @default(now())
  courses   Course[]
  attempts  QuizAttempt[]
  profile   Profile?
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  slug        String    @unique
  createdBy   Int
  createdAt   DateTime  @default(now())
  chapters    Chapter[]
  quizzes     Quiz[]
  creator     User      @relation(fields: [createdBy], references: [id])
}

model Chapter {
  id       Int     @id @default(autoincrement())
  courseId Int
  title    String
  order    Int
  content  String?
  course   Course  @relation(fields: [courseId], references: [id])
}

model Quiz {
  id        Int           @id @default(autoincrement())
  courseId  Int? // Made nullable for standalone quizzes
  title     String
  questions String
  settings  String?
  createdAt DateTime      @default(now())
  course    Course?       @relation(fields: [courseId], references: [id])
  attempts  QuizAttempt[]
}

model QuizAttempt {
  id              Int      @id @default(autoincrement())
  userId          Int
  quizId          Int
  answers         String
  score           Int
  totalQuestions  Int
  correctAnswers  Int
  percentage      Int
  timeSpent       Int
  detailedResults String
  completedAt     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  quiz            Quiz     @relation(fields: [quizId], references: [id])
}

model Profile {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  firstName     String?
  lastName      String?
  bio           String?
  avatar        String?
  preferences   String?
  learningGoals String?
  timezone      String?
  language      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}
